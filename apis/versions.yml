openapi: 3.0.3
info:
  title: DealHub Version Open API
  description: |-
    This API provides a comprehensive set of services for managing versions and the associated product catalog within the DealHub CPQ system. It allows for system-to-system integration to get, create, duplicate, activate, and manage the content of versions.

    Several operations, such as duplicating, activating, and uploading a product catalog, are asynchronous. These endpoints return a `request_id` for tracking.

    All requests require a secret Bearer Token in the `Authorization` header, which is generated by a CPQ administrator.
  version: 1.0.0
servers:
  - url: https://api.dealhub.io.dealhub.io
    description: The base URL for your DealHub instance.
    variables:
      your-dealhub-instance:
        default: app
        description: Your specific DealHub instance name (e.g., 'app', 'service-eu1').

security:
  - bearerAuth: []

paths:
  /api/v1/version/id/{version_id}:
    get:
      summary: Get Version by ID
      operationId: getVersionById
      parameters:
        - name: version_id
          in: path
          required: true
          schema: { type: string, maxLength: 16 }
      responses:
        '200':
          description: Success.
          content:
            application/json:
              schema: { $ref: '#/components/schemas/Version' }

  /api/v1/version/name/{version_name}:
    get:
      summary: Get Version by Name
      operationId: getVersionByName
      parameters:
        - name: version_name
          in: path
          required: true
          schema: { type: string, maxLength: 120 }
      responses:
        '200':
          description: Success.
          content:
            application/json:
              schema: { $ref: '#/components/schemas/Version' }

  /api/v1/versions:
    get:
      summary: Get a List of Versions
      operationId: getVersions
      parameters:
        - name: status
          in: query
          schema:
            type: string
            enum: [DRAFT, ACTIVE, DEACTIVATED]
      responses:
        '200':
          description: Success.
          content:
            application/json:
              schema:
                type: array
                items: { $ref: '#/components/schemas/Version' }

  /api/v2/version/duplicate:
    post:
      summary: Duplicate a Version
      operationId: duplicateVersion
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: '#/components/schemas/DuplicateVersionRequest' }
      responses:
        '200':
          description: Success. The duplication process has started.
          content:
            application/json:
              schema: { $ref: '#/components/schemas/AsyncResponse' }

  /api/v1/version/activate:
    post:
      summary: Activate a Version
      operationId: activateVersion
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: '#/components/schemas/ActivateVersionRequest' }
      responses:
        '200':
          description: Success. The activation process has started.
          content:
            application/json:
              schema: { $ref: '#/components/schemas/AsyncResponse' }

  /api/v1/version/{version_id}/products:
    get:
      summary: Get Products of a Version (Basic)
      operationId: getVersionProducts
      parameters:
        - name: version_id
          in: path
          required: true
          schema: { type: string, maxLength: 16 }
        - name: offset
          in: query
          schema: { type: integer, minimum: 0, maximum: 10000 }
        - name: limit
          in: query
          schema: { type: integer, minimum: 1, maximum: 1000 }
        - name: product_option
          in: query
          schema: { type: string, enum: [ALL, MODIFIED], default: ALL }
        - name: pricing_option
          in: query
          schema: { type: string, enum: [MIN, MAX, FIRST], default: MIN }
      responses:
        '200':
          description: Success.
          content:
            application/json:
              schema: { $ref: '#/components/schemas/VersionProductsResponse' }

  /api/v1/version/product_by_sku:
    post:
      summary: Get Specific Products by SKU (Basic)
      operationId: getProductsBySku
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: '#/components/schemas/ProductsBySkuRequest' }
      responses:
        '200':
          description: Success.
          content:
            application/json:
              schema: { $ref: '#/components/schemas/VersionProductsResponse' }

  /api/v1/version/products_excel/{version_id}:
    get:
      summary: Extract Products to Excel
      operationId: extractProductsExcel
      parameters:
        - name: version_id
          in: path
          required: true
          schema: { type: string, maxLength: 16 }
      responses:
        '200':
          description: Success.
          content:
            application/vnd.ms-excel:
              schema: { type: string, format: binary }

  /api/v1/version/{version_id}/products_catalog:
    get:
      summary: Get Product Catalog (Detailed)
      operationId: getProductCatalog
      parameters:
        - name: version_id
          in: path
          required: true
          schema: { type: string, maxLength: 16 }
        - name: sku
          in: query
          schema:
            type: array
            items: { type: string }
            maxItems: 100
        - name: offset
          in: query
          schema: { type: integer, default: 0 }
        - name: limit
          in: query
          schema: { type: integer, default: 100 }
      responses:
        '200':
          description: Success.
          content:
            application/json:
              schema: { $ref: '#/components/schemas/ProductCatalogGetResponse' }
    post:
      summary: Create or Update Product Catalog (Detailed)
      operationId: uploadProductCatalog
      parameters:
        - name: version_id
          in: path
          required: true
          schema: { type: string, maxLength: 16 }
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: '#/components/schemas/ProductCatalogPostRequest' }
      responses:
        '200':
          description: Success. The upload process has started.
          content:
            application/json:
              schema: { $ref: '#/components/schemas/AsyncResponse' }

  /api/v1/version/{version_id}/products_catalog/all:
    delete:
      summary: Delete All Products from Catalog
      operationId: deleteAllProducts
      parameters:
        - name: version_id
          in: path
          required: true
          schema: { type: string, maxLength: 16 }
      responses:
        '200':
          description: Success. All products were deleted.

  /api/v1/version/{version_id}/products_catalog/by_sku:
    delete:
      summary: Delete Specific Products by SKU
      operationId: deleteProductsBySku
      parameters:
        - name: version_id
          in: path
          required: true
          schema: { type: string, maxLength: 16 }
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                skus:
                  type: array
                  items: { type: string }
      responses:
        '200':
          description: Success. Specified products were deleted.

  /api/v1/request/{request_id}/status:
    get:
      summary: Get Asynchronous Request Status
      operationId: getAsyncRequestStatus
      parameters:
        - name: request_id
          in: path
          required: true
          schema: { type: string, maxLength: 16 }
      responses:
        '200':
          description: Success.
          content:
            application/json:
              schema: { $ref: '#/components/schemas/RequestStatus' }

  /api/v1/request/{request_id}/summary:
    get:
      summary: Get Asynchronous Request Execution Summary
      operationId: getAsyncRequestSummary
      parameters:
        - name: request_id
          in: path
          required: true
          schema: { type: string, maxLength: 16 }
      responses:
        '200':
          description: Success.
          content:
            application/json:
              schema: { $ref: '#/components/schemas/RequestSummaryResponse' }

components:
  securitySchemes:
    bearerAuth: { type: http, scheme: bearer }
  schemas:
    Version:
      type: object
      properties:
        name: { type: string }
        comment: { type: string }
        status: { type: string }
        version_id: { type: string }
    DuplicateVersionRequest:
      type: object
      required: [version_id, new_version_name]
      properties:
        version_id: { type: string, maxLength: 16 }
        new_version_name: { type: string, maxLength: 120 }
        comment: { type: string, maxLength: 4000 }
        to_account_instance: { type: string }
    ActivateVersionRequest:
      type: object
      required: [version_id]
      properties:
        version_id: { type: string, maxLength: 16 }
    AsyncResponse:
      type: object
      properties:
        request_id: { type: string }
    Info:
      type: object
      properties:
        version_id: { type: string }
        version_status: { type: string }
        compared_with_version_id: { type: string }
        more_results_matching_the_request: { type: boolean }
        offset: { type: string }
        limit: { type: string }
        error: { type: string }
    ProductBasic:
      type: object
      properties:
        sku: { type: string }
        name: { type: string }
        type: { type: string, enum: [PRODUCT, BUNDLE] }
        description: { type: string }
        price:
          type: object
          additionalProperties: { type: string }
        attributes:
          type: array
          items:
            type: object
            additionalProperties: { type: string }
        bundle_items:
          type: array
          items: { type: string }
    VersionProductsResponse:
      type: object
      properties:
        info: { $ref: '#/components/schemas/Info' }
        products:
          type: array
          items: { $ref: '#/components/schemas/ProductBasic' }
    ProductsBySkuRequest:
      type: object
      required: [sku]
      properties:
        version_id: { type: string, maxLength: 16 }
        pricing_option: { type: string, enum: [MIN, MAX, FIRST] }
        sku:
          type: array
          items: { type: string, maxLength: 200 }
    ProductAttribute:
      type: object
      properties:
        type: { type: string, enum: [DATE, TEXT, TEXT_LIST, NUMBER, BOOLEAN, COGS] }
        value: { type: string }
    ProductFactor:
      type: object
      properties:
        name: { type: string }
        value: { type: string, default: "1" }
        applicable: { type: boolean, default: false }
    ProposalAttribute:
      type: object
      properties:
        name: { type: string, maxLength: 50 }
        value: { type: string, maxLength: 2000 }
        applicable: { type: boolean, default: false }
    VolumeDiscount:
      type: object
      additionalProperties: { type: string }
    PricingRule:
      type: object
      properties:
        playbook: { type: string }
        ordinal: { type: integer }
        name: { type: string, maxLength: 256 }
        rule: { type: string, maxLength: 4096 }
        price: { type: string, maxLength: 4096 }
        price_format: { type: string, enum: [BASIC, ADVANCED] }
        price_type: { type: string, enum: [SOLID, FROM_ALL_QUOTE, ITEM, GROUP, NEGATIVE, GROUP_NEGATIVE, ERP] }
        currency: { type: string }
        dynamic_price: { type: boolean, default: false }
        rounding_policy: { type: string }
        max_discount: { type: integer, minimum: 0, maximum: 100 }
        default_discount: { type: integer, minimum: 0, maximum: 100 }
        apply_to: { type: string, enum: [ASSIGNMENT_RULES, GENERATED_ITEMS], default: GENERATED_ITEMS }
        apply_to_templates: { type: string }
        apply_to_rules: { type: string }
        level: { type: integer, enum: [0, 1, 2], default: 0 }
        note: { type: string, maxLength: 4096 }
        based_of_tags: { type: string }
        based_of_price: { type: string, enum: [UNIT, NET, LIST, BOTH, USER, MSRP] }
        limit_type: { type: string, enum: [MIN, MAX, AS_IS, RANGE] }
        limit_min_value: { type: number }
        limit_max_value: { type: number }
        disable_rounding: { type: boolean }
        include_positive: { type: boolean }
        volume_discount: { $ref: '#/components/schemas/VolumeDiscount' }
    ProductPricing:
      type: object
      properties:
        advanced: { type: boolean, default: false }
        pricing_rules:
          type: array
          items: { $ref: '#/components/schemas/PricingRule' }
    AssignmentRule:
      type: object
      properties:
        ordinal: { type: integer }
        name: { type: string, maxLength: 200 }
        rule: { type: string, maxLength: 2048, default: "false" }
        note: { type: string, maxLength: 4096 }
        product_factors:
          type: array
          items: { $ref: '#/components/schemas/ProductFactor' }
          maxItems: 4
        proposal_attributes:
          type: array
          items: { $ref: '#/components/schemas/ProposalAttribute' }
    ProductAssignment:
      type: object
      properties:
        assignment: { type: string, enum: [RULE_BASED, ALWAYS, NEVER], default: NEVER }
        playbook: { type: string }
        assignment_rules:
          type: array
          items: { $ref: '#/components/schemas/AssignmentRule' }
        assignment_templates:
          type: array
          items: { type: string }
    ConditionalName:
      type: object
      properties:
        playbook: { type: string }
        ordinal: { type: integer }
        rule: { type: string, maxLength: 2048 }
        name: { type: string, maxLength: 400 }
        description: { type: string, maxLength: 8192 }
    BundleItem:
      type: object
      properties:
        sku: { type: string }
        ordinal: { type: integer, default: 0 }
        how_to_add: { type: string, enum: [AUTOMATIC, MANUAL, COMBINED] }
        enable_modify_factors: { type: boolean }
        product_factors:
          type: array
          items: { $ref: '#/components/schemas/ProductFactor' }
    ProductCatalogItem:
      type: object
      properties:
        sku: { type: string, maxLength: 200 }
        name: { type: string, maxLength: 400 }
        description: { type: string, maxLength: 21844 }
        tags: { type: array, items: { type: string, maxLength: 200 } }
        primary_tag: { type: string, maxLength: 200 }
        merge_products: { type: boolean, default: false }
        product_attributes:
          type: object
          additionalProperties: { $ref: '#/components/schemas/ProductAttribute' }
        product_assignments:
          type: array
          items: { $ref: '#/components/schemas/ProductAssignment' }
        product_pricing: { $ref: '#/components/schemas/ProductPricing' }
        product_conditional_names:
          type: array
          items: { $ref: '#/components/schemas/ConditionalName' }
    BundleCatalogItem:
      allOf:
        - $ref: '#/components/schemas/ProductCatalogItem'
        - type: object
          properties:
            bundle_type: { type: string, enum: [FIXED_PRICE, PRODUCT_SUMMARY], default: PRODUCT_SUMMARY }
            price_in_bundle_is_zero: { type: boolean, default: false }
            sync_to_crm: { type: boolean, default: false }
            sync_bundle_price: { type: boolean, default: false }
            bundle_items:
              type: array
              items: { $ref: '#/components/schemas/BundleItem' }
    ProductCatalogGetResponse:
      type: object
      properties:
        info: { $ref: '#/components/schemas/Info' }
        products:
          type: array
          items: { $ref: '#/components/schemas/ProductCatalogItem' }
        bundles:
          type: array
          items: { $ref: '#/components/schemas/BundleCatalogItem' }
    ProductCatalogPostRequest:
      type: object
      properties:
        products:
          type: array
          items: { $ref: '#/components/schemas/ProductCatalogItem' }
        bundles:
          type: array
          items: { $ref: '#/components/schemas/BundleCatalogItem' }
    RequestStatus:
      type: object
      properties:
        request_id: { type: string }
        status: { type: string, enum: [in-progress, done, failed] }
        error_description: { type: string }
        error_code: { type: string }
    RequestSummary:
      type: object
      properties:
        success_count: { type: integer }
        errors_count: { type: integer }
        warnings: { type: array, items: { type: string } }
        errors: { type: array, items: { type: string } }
    RequestSummaryResponse:
      type: object
      properties:
        status: { type: string, enum: ["In Progress", "Completed", "Error"] }
        summary: { $ref: '#/components/schemas/RequestSummary' }
