openapi: 3.0.3
info:
  title: DealHub User Open API
  description: |-
    This API provides a set of services for managing user information within the DealHub platform. It allows for system-to-system integration to retrieve, create, and update user data.

    All requests require a secret Bearer Token in the `Authorization` header, which is generated by a CPQ administrator.
  version: 1.0.0
servers:
  - url: https://api.dealhub.io.dealhub.io
    description: The base URL for your DealHub instance.
    variables:
      your-dealhub-instance:
        default: app
        description: Your specific DealHub instance name (e.g., 'app', 'service-eu1').

security:
  - bearerAuth: []

paths:
  /api/v1/user/login/{login}:
    get:
      summary: Get User by Login
      description: Retrieves a single user's details based on their login name.
      operationId: getUserByLogin
      parameters:
        - name: login
          in: path
          required: true
          schema:
            type: string
            maxLength: 100
          description: The login name of the user.
      responses:
        '200':
          description: Success. Returns the user object.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          description: Bad Request. The user could not be found.
        '403':
          description: Forbidden. Invalid or missing authentication token.

  /api/v1/user/id/{id}:
    get:
      summary: Get User by ID
      description: Retrieves a single user's details based on their DealHub user ID.
      operationId: getUserById
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            maxLength: 16
          description: The unique DealHub ID of the user.
      responses:
        '200':
          description: Success. Returns the user object.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          description: Bad Request. The user could not be found.
        '403':
          description: Forbidden. Invalid or missing authentication token.

  /api/v1/users:
    get:
      summary: Get a List of Users
      description: Retrieves a list of users, with an option to filter by their status.
      operationId: getUsers
      parameters:
        - name: status
          in: query
          schema:
            type: string
            enum: [active, inactive]
          description: Filter users by their active or inactive status.
      responses:
        '200':
          description: Success. Returns an array of user objects.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
        '403':
          description: Forbidden. Invalid or missing authentication token.
    put:
      summary: Update Users (v1)
      description: Updates one or more existing users in DealHub. This operation identifies users by their `login`.
      operationId: updateUsersV1
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                users:
                  type: array
                  items:
                    $ref: '#/components/schemas/UserUpdateV1'
      responses:
        '200':
          description: Success. The response may contain a list of errors for users that could not be updated.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserUpdateErrorResponse'
        '400':
          description: Bad Request. The request payload is invalid.
        '403':
          description: Forbidden. Invalid or missing authentication token.

  /api/v2/users:
    put:
      summary: Create or Update Users (v2)
      description: Creates new users or updates existing ones. The operation uses the `login` field to identify existing users.
      operationId: createOrUpdateUsersV2
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                users:
                  type: array
                  items:
                    $ref: '#/components/schemas/UserUpdateV2'
      responses:
        '200':
          description: Success. The operation was completed.
        '400':
          description: Bad Request. The request payload is invalid.
        '403':
          description: Forbidden. Invalid or missing authentication token.

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      description: A secret token generated by a CPQ administrator.

  schemas:
    User:
      type: object
      properties:
        login: { type: string, maxLength: 100 }
        id: { type: string, maxLength: 16 }
        email: { type: string, format: email, maxLength: 100 }
        name: { type: string, maxLength: 300 }
        position: { type: string, maxLength: 300 }
        business_title: { type: string }
        phone: { type: string, maxLength: 50 }
        mobile: { type: string, maxLength: 100 }
        fax: { type: string, maxLength: 100 }
        company: { type: string, maxLength: 100 }
        street: { type: string, maxLength: 128 }
        city: { type: string, maxLength: 32 }
        state: { type: string, maxLength: 32 }
        country: { type: string, maxLength: 32 }
        postal_code: { type: string, maxLength: 16 }
        user_manager_login: { type: string, maxLength: 100 }
        is_active: { type: boolean }

    UserUpdateV1:
      type: object
      properties:
        login: { type: string, maxLength: 100 }
        email: { type: string, format: email, maxLength: 100 }
        name: { type: string, maxLength: 300 }
        is_active: { type: boolean }
        position: { type: string, maxLength: 300 }
        phone: { type: string, maxLength: 50 }
        mobile: { type: string, maxLength: 100 }
        fax: { type: string, maxLength: 100 }
        company: { type: string, maxLength: 100 }
        street: { type: string, maxLength: 128 }
        city: { type: string, maxLength: 32 }
        state: { type: string, maxLength: 32 }
        country: { type: string, maxLength: 32 }
        postal_code: { type: string, maxLength: 16 }
        user_manager_login: { type: string, maxLength: 100 }
      required:
        - login
        - email
        - name
        - is_active

    UserUpdateV2:
      type: object
      properties:
        login: { type: string, maxLength: 90 }
        email: { type: string, format: email, maxLength: 100 }
        name: { type: string, maxLength: 300 }
        external_user_id: { type: string, maxLength: 200 }
        is_active: { type: boolean }
        position: { type: string, maxLength: 300 }
        business_title: { type: string }
        phone: { type: string, maxLength: 50 }
        mobile: { type: string, maxLength: 100 }
        fax: { type: string, maxLength: 100 }
        company: { type: string, maxLength: 100 }
        street: { type: string, maxLength: 128 }
        city: { type: string, maxLength: 32 }
        state: { type: string, maxLength: 32 }
        country: { type: string, maxLength: 32 }
        postal_code: { type: string, maxLength: 16 }
        user_manager_login: { type: string, maxLength: 100 }
      required:
        - login
        - email
        - name
        - external_user_id
        - is_active

    UserUpdateError:
      type: object
      properties:
        login: { type: string }
        message: { type: string }

    UserUpdateErrorResponse:
      type: object
      properties:
        errors:
          type: array
          items:
            $ref: '#/components/schemas/UserUpdateError'
